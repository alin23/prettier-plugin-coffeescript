// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`conditional-expression.coffee 1`] = `
if <div /> then jsxModeFromElementNonBreaking else 'a'

if jsxModeFromElementNonBreaking then <div /> else 'a'

if jsxModeFromElementNonBreaking then 'a' else <div />

if <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div>
  'jsx mode from element breaking'
else
  'a'

if 'jsx mode from element breaking'
  <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div>
else
  'a'

if 'jsx mode from element breaking'
  'a'
else
  <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div>

<div>
  {if a then 'a' else if b then 'b' else 'c'}
</div>

if cable then 'satellite' else if publiq then 'affairs' else if network then <span id="c" /> else 'dunno'

if cable then 'satellite' else if publiq then 'affairs' else if network then <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div> else 'dunno'

if cable then <div><span>thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo</span></div> else if sateline then 'public' else if affairs then 'network' else 'dunno'

<div>
  {properties.length > 1 or (
    if properties.length is 1 and properties[0].apps.size > 1
      if not draggingApp? and not newPropertyName?
        <MigrationPropertyListItem />
      else
        <MigrationPropertyListItem apps={Immutable.List()}/>
    else null
  )}
</div>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if <div />
  jsxModeFromElementNonBreaking
else
  "a"

if jsxModeFromElementNonBreaking
  <div />
else
  "a"

if jsxModeFromElementNonBreaking
  "a"
else
  <div />

if (
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>
)
  "jsx mode from element breaking"
else
  "a"

if "jsx mode from element breaking"
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>
else
  "a"

if "jsx mode from element breaking"
  "a"
else
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>

<div>
  {if a
    "a"
  else if b
    "b"
  else
    "c"}
</div>

if cable
  "satellite"
else if publiq
  "affairs"
else if network
  <span id="c" />
else
  "dunno"

if cable
  "satellite"
else if publiq
  "affairs"
else if network
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>
else
  "dunno"

if cable
  <div>
    <span>
      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
    </span>
  </div>
else if sateline
  "public"
else if affairs
  "network"
else
  "dunno"

<div>
  {properties.length > 1 or (
    if properties.length is 1 and properties[0].apps.size > 1
      if not draggingApp? and not newPropertyName?
        <MigrationPropertyListItem />
      else
        <MigrationPropertyListItem apps={Immutable.List()} />
    else
      null
  )}
</div>

`;

exports[`expression.coffee 1`] = `
<View style={{
  someVeryLongStyle1: 'true',
  someVeryLongStyle2: 'true',
  someVeryLongStyle3: 'true',
  someVeryLongStyle4: 'true',
}} />

<View style={[{
  someVeryLongStyle1: 'true',
  someVeryLongStyle2: 'true',
  someVeryLongStyle3: 'true',
  someVeryLongStyle4: 'true',
}]} />

<Something>
  {() ->
    <SomethingElse>
      <span />
    </SomethingElse>
  }
</Something>

<Something>
  {items.map (item) ->
    <SomethingElse>
      <span />
    </SomethingElse>
  }
</Something>

<Something>
  {->
    <SomethingElse>
      <span />
    </SomethingElse>}
</Something>

<RadioListItem
  key={option}
  imageSource={this.props.veryBigItemImageSourceFunc && this.props.veryBigItemImageSourceFunc(option)}
  imageSize={this.props.veryBigItemImageSize}
  imageView={this.props.veryBigItemImageViewFunc?(option)}
  heading={this.props.displayTextFunc(option)}
  value={option}
/>

<ParentComponent prop={
  <Child>
    test
  </Child>
}/>

<BookingIntroPanel
  prop="long_string_make_to_force_break"
  logClick={(data) -> doLogClick('short', "short", data)}
/>

<BookingIntroPanel
  logClick={(data) -> doLogClick('long_name_long_name_long_name', "long_name_long_name_long_name", data)} />

<Component
  onChange={(
    key,
    value
  ) ->
    @setState updatedTask: @state.updatedTask.set key, value
  }
/>

<BookingIntroPanel>
  {(data) -> doLogClick('long_name_long_name_long_name', "long_name_long_name_long_name", data)}
</BookingIntroPanel>

<Component>
  {(
    key,
    value
  ) ->
    @setState updatedTask: @state.updatedTask.set key, value
  }
</Component>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<View
  style={
    someVeryLongStyle1: "true"
    someVeryLongStyle2: "true"
    someVeryLongStyle3: "true"
    someVeryLongStyle4: "true"
  }
/>

<View
  style={[
    someVeryLongStyle1: "true"
    someVeryLongStyle2: "true"
    someVeryLongStyle3: "true"
    someVeryLongStyle4: "true"
  ]}
/>

<Something>
  {->
    <SomethingElse>
      <span />
    </SomethingElse>}
</Something>

<Something>
  {items.map (item) ->
    <SomethingElse>
      <span />
    </SomethingElse>}
</Something>

<Something>
  {->
    <SomethingElse>
      <span />
    </SomethingElse>}
</Something>

<RadioListItem
  key={option}
  imageSource={
    @props.veryBigItemImageSourceFunc and
    @props.veryBigItemImageSourceFunc option
  }
  imageSize={@props.veryBigItemImageSize}
  imageView={@props.veryBigItemImageViewFunc? option}
  heading={@props.displayTextFunc option}
  value={option}
/>

<ParentComponent prop={<Child>test</Child>} />

<BookingIntroPanel
  prop="long_string_make_to_force_break"
  logClick={(data) -> doLogClick "short", "short", data}
/>

<BookingIntroPanel
  logClick={(data) ->
    doLogClick(
      "long_name_long_name_long_name"
      "long_name_long_name_long_name"
      data
    )}
/>

<Component
  onChange={(key, value) ->
    @setState updatedTask: @state.updatedTask.set key, value}
/>

<BookingIntroPanel>
  {(data) ->
    doLogClick(
      "long_name_long_name_long_name"
      "long_name_long_name_long_name"
      data
    )}
</BookingIntroPanel>

<Component>
  {(key, value) -> @setState updatedTask: @state.updatedTask.set key, value}
</Component>

`;
